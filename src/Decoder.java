public class Decoder {
    public static void main(String[] args) {
        String cipherText = "DEEOOAPCEAKLDIFBAJNNOMJFHFOKAEPMIIEMMPFNPDNMOOBFABIGKEAGNIOPAKNKCGGCFEHHAMMPKELJFHCGMGAIHFMEHELLIOJDAJEJDAIPKEKFIHAEAFFINHIJKEFAAFJLAMNGFFAFAJECGEAANCCCFMOKFOOGGCHCHADPHNMDFEKJJPPFDNAKJFFHAMDHIGEOMAKFMAHGKHEOAFEDMHMDFCPLNCEAAKIFOIJDDOEDABEPBGFNHPLGEDDAEPEBNFIDOCFINMAAFALAJJIJKCGBBMKMAIKNIAFJHJNENAIMKEBFILAMACGJPCCNKHDJEMHGDIBHFKAJIAFHNNFGHEJFHMMDOEMHBHJKAIFFOOACEALEENKOKIDCEKHFMFHDAFMBFKBHJCOHANCKCPEPMEMPBIFIMGAIENFGHIFNKOAIIAAIIKCBCHAFDCAHKJMHFEGDFINALKAGHAMKABIAOAEKFACGNHIGELHPDIOBOONNIGDNKIADALPJAHADCAMBPNCDPEPLNMFPDNOOAJABAAPGNFNANODHCLPADPFDJJNEKAADCCPDDAPMBNFLMNJAABAJAFEPJHCMAHPDDDAGNAEGHFCJDHCGECIBKHDAMDAEMAOOODOBNHCABCHDOHDPEDJMAINJDKABIAHKOEDDDHPDKCHNOHDGHGHGHIOIMOKICIIBIBFDHOMIANAHOAJGICHOHHEECCFFKGONJMIAOFMPAHOOAIOEAAOINAGBGNOEAIAGFDAJAIBAJKDBHPCLEDACNNDBIOALMJJMAHIOOIPBFOCEAHMKICAFNEAKFIAEKJOGINAONHPAHDAMOAIDOJLBMHENDCKIOKEEADEOMNCACBDLNHPOJMIJOEGFBCAPEAHBEJIMOHAJADHPMFDFHBOEEINMNOOFDIHBAOAPAFMECHBBNNBFEEJPAIKJDKAAMAJAEAIOKHABMHCLMHHOIIALNGCCFFHHOFEKEJJOAIFOHKIEMMKCHBLDMHFJOHOGCICIHCAKAHHCJHKKCIJONEFIHEBKJMMOOEJAIDJCAIMLHOAHOACMIECKCHNFPCABKJBDHBGJFINMOKAMDAAIHCCFMGGDMFNBCAGLDOGMFEFKPMOADIKOCBCMKEHFIMNKMODGAKIIKECFAIKAAILHHDHCHEGBFMNLCAPBIJCCPIPMIOAOOADHCIMAHAHPKAFLMGEIGFHHCAFMDNMCFEBACBDKDIPDDOMDKECJIBCMMOAKKNMEKEPAAJEICAIBFAACFJLBECAPNCCJHKABMJOFGDICOENFEMAMNAKIHHEJOABIEAMHHEHFIFHDCFGBCHDIKHCBAAAOAIEAPOHIAFHMHHGKFIKHDKKKCIFJHFHBDAENIAMOHEIEIDHKCICFNOOAKNCNAAAGNKDEHCHAAFBJJDICKEPFEIFMAMJOEFAHACHDIPDCMPCMALNLFPPPAJCHACIJJEHOCIMEHKFIAGJMIIIGKFCAIHIFKEDCHEABAIGEAKMEHEBDCHHCCAHBBNODPIBPINIEOAPJEAKLKKOBJMMIFCPBFKKHAIHBMBALAKMFMKDLFPDDHBICOAFFIANCCAIHHEACFDMFMDKOCIBEBKHKDAPKJAGDFELDALDFCOBOAPOOANKEIKIFOFJNEHFAOAKJACIBOEDMFIHLAGCGAFKJBAPFCLHNAHGFGGHOCIMBEKOBFINBIDFNHJMOEANCOOLFIEAHNAHPOAADOABEPFIDKFJBNHNHDACHJNNNOEFFPMOOAIFLFJELMABFCANPHAOFMCNDBJCCBADLFHKMAAAKAHGDECILNEFDIHIOKJFOEADBKHPBPGAOAIDFFOOFDIIEOBAFAHCECCKMOKDIIJEHMNENBBDPKHDNADAPAJCDIAAFNACOOEDCDPMPCDKHOKNJEPILOJIANAAGMAJFECBPFAMDCJCPGDEJAAOIPAJBLJNDAOLIADHADGKPDNOAAEGDHGABAGLHPFMKCENPEOGMFNOPFFDBMHENECAAAHNKHHCHMHBCNBIOOIDPMKMEOEIJALAOAHKMOCFINAIFIGDGDHCHECDGKHIJODOEOACKBABJONPCHFEPMAHGNAKCHIHHEPNKOPJFDDBMMNNLILAHNPBBDDABKADJAMIKKGCNLFCEADPINDBMFABCDAKJOIKCAIAJADHICCAGLAOKFBNNOICKOOOFHIHFEMAAFINCCOAHIAOCADFDHHKCHCDNNDPBACALNJGABEDLADJDKMPDDOHBMOOHKILEACJNAAICONABAJNEGGADNCJDHMOMFOIGEFHFHPADNDAHMJINAGIMOBPBCEOLANLCGOICKCIKPMOMFIFPPKDLDAHFMNNFDAKFPKAJAOHFCPJKHAAFPIECGGCCIAJCHAEJHAAGAOOFMNENDJNJAAAJAACBNNHIAFEKBKADAHNBFCOIENAHCNEAMAEDPADJMPGCACOGOCAFIKMNNEEBIDFAHAAAGAAPOALLPBKKKIBHHKMPDEIHAHELMGOAENMEAFFDNIEPMPHJDDACFAOPHAADNHLJJCMDDEAKOKEAICPLDMKLNIIPINEJIAJMLAHDKHMKAPEBMHDHGCPFNCANAJIEOIIPHOFGAAHBPPAPNOIBLNJMDPMCPJCCKAEFKNNBDAEAAFCDMNJMFFHAAFBLAMAIAHEGFCFFNAJHIDDADHGCPCDIKHDMCCEKMACOPANEKAMCIFCEMGOGHFIFOMCDPHCMMIPPJOAEDAGKEEICKHBLPHCIMHBCIAACNGPKMFHJOFDOEPJNAIIBIKADIAJOOGDLDHNCCCHKOHLGHKHAHIGCKOKNCIFCIAFJHONIDNAHOAHDICHMHHCHACFJKGBBJMIIOFGNMHOMAICOANOJNAGAPNHNAFFCICADACBDKMMAKCAFFPGMFANCFNMHHEJHEIAJAGGIPAFBGBMPIKAPANFEBOHEOFNCIBIBOAPFAFIHOENLACAIAICBBOCBAHEKFPAHNALMLFOKHIAIIGGFFIDAFOACOAIOCAJPAACEONFJMGPNPIOJOHMAIHMJDEJMBMJFAIBHCOACEAEDAGJDAAGLCNDEADGEKCPODOEONOOGKIIAAEJCAOKKDOHCAPIAAFAPJEEGBGJILABIHNADAOOJFNAFDAOEHJFCHAFFFAMJHEDJIMHJCFPPMHDJKHEDEDACAHMCNHCLMHFBNFIPOILAFKMCOENODAJGEALFMAJICABEDJACJEMCAGHFCPKHOEABJABGIADPNHIHIPAMAFGJCHANKAOLIKFIHGFEPFCJKHLNAAIHKHECHDOBAIFFHEANAGJCHFMOCEIKEHGPFNDHMFDDMHDJEPAPAHBDNHCHMHPINGIOOIJEPKNHOALLFCKFCAMOEAKBHIGDMEEMIJDJDANHFGGGAPAEAFMOINOHNNFGIHAONCGNFKAEOADEJPGPFAEPFNNNAONLMDIDKFEDCHDGFHFLHEAHAADFBNDCCHDPHCINOBHNDEABDAECHMIHKHAMAHMFCEBGPDNBOEMHBMEFDBKACFPLDIEKJOFNMNNOOLJJEAMFGANPNAALHLOPNAHBCACKHHCMIPAJNFBFCHDCOPCMAAIHKJFCBEAAAJOIDDAINADCCADCDPGAIMOEOKNFMKAMOJDBCDOMOAJNDACHCHEFGPIKKJKLLAKLFIFCEPFMHIPBOKAAIALEEBIBKHOFCHCIMHIEINALNCNDGPOKOIOPKFGKNMMCBIKFJIHDCDJKAEDCAMACKJEBACAANBNDBEPGACCDNCEEMPEGMDAIFABPEGIJKHMDBHCFMHMPIHAMNCPCFPOOOIBIHCACACHFFCKBCILGANJEAGAPDFALNANJHBLBMABHANDKCHDEEFIBOIABPOAPCAOCCFNIOIPLIKFFMGNOAGIMODIHLDDHNPMKNBACNCFFAMAMFAPJGAHFHOCCLOMBFEFAHHHCDALFIAKDHIPBEGCBMPIEKDOJMNLIAEIOKFCOBHFGNGBMNFEFMPCDIDAAFJCHILINKDNOFDANKAKMHCFKHMCCMFKGHIJJEFPLDJOMEAAKMJKPAEIOOBNBHEKBAKGCNFPFDIMMLONBBAMKEIECIOBDFEIKMECBAAAGAIHNBOOMANENNEAGNPDKPDAGFJDLOMEKMEHFFIMBEEENABEHIAKCJANIFAHKCINJOADIENNAKGGJEAANADLCCHIIMENLFBCDMGDANFODHIBMFFBIEADEMAKGHIAHOAEMICLNKMAKNALGBHNCOPMFFDAEEADLHEFDHMECPFKFHINCEMPDDJILKAACMJFMABIHOBIAFEKHAKILNCPJDIADHONABAMMEJEAIOIBOEIJMELNAIAAAADKKFOANNJFIGAKNCNHIKAMOAPGAPHAHPOKBDAONJOOIJIHOHNDGCHMKFMIINADNPIMHDMGOCFBKHNJFACBHAKEKIBCECPMDECPJMAKMABDNGHBHIINCKCOOHBBJNIHKKEPMKKOAIGPJBAHAIJNPOALEANAOPOGNADGBNACNAABABHCHHGFLCHENFMIIKIDOPGEPDEMKJCOICACAHDKFHAKKAHEBONGOJFINADGEHOMEKGBNAHANAKBOILGANAKFHPFHCMPNCIKJLGBFABACNODAICDHCEBMAFNFAKMDIFMACEFDIANDOOAAIOKIMAKAKBDCKMPKELGKGFOHMDAPFAACAMDAMFHHIDNEKDCFHHFJAIPKNCJLBKNAINKEFCHMGGJMFIPMECLKHABAIOHCKLFKIBKINELMNFFCOALOJIBIAEGMJMDEAIEOEBJJMJEEAMCIAMIAEHHKKINKKKFGKKGCINEHGNPOIKMIOKLDIEGNKCEMGBPHFANFACDELHPHHBJJCKCMIKDPANJOICDMKMBDEJIBJJJAIADAOALEAPAELOHOFNNAHDOMPKLIFIOOCJMAKHAOFODEJAONPHCAJMMDEEDBIEAICKLHMALEAGDACHEHIIGPKDMADFMKNPFDOLOOOOCKINKAEJAAEJACMODAINCIOAHACADMMDFOPBHIIEAMAFLFAKKKKGCIEIOKHBEACAHKJPEHKMHFAKNKACNHHFMIIIMKGPFOFHLOFCEOHJPAIJMKONMNADIKKALAIEKPKOJKOLHIKCKMPJLDDHDKFIHIAIAOPHDMDACOAHHHKIIOAMLIFMHDEKBJNJNAEGKOMOLAIONIPBGEAIIAAAGOALLOMNNOHCKFCDOODHIAMIDOKKPHCHIAHFBAGIBKODBDNFCNAEEEEAHNGIHPFDDMPJCAMEDMEFDAICHAHHGHBADNANBCFNBDADKABKBCACNONKIAIOIHDHBHEAIBMNECACOEICLPIAHMONJIGELAMAEAFCMHPNMNOHFHJJHEMNCBICBHHANAMIOKIFFMOKHFICHIGOFEPEDEDADKAEIOOJLAEJCEMKLNIKPHJGBFIBFMKKACIEOCEEHMAMHBAKLMIBIAGOCNHDIMCDLNEEFINEAMJGKAAMIOEBPIJAAACMBDFAEOAPLDHGDHDJPMCHACPBOIPALAFMPFHFHKGMIOPAEAGCFCFFCOGHNICAMAOCJANANKJEPIHGNFHBAJCDDKPLMACNKFJPJCAEHNBBJHNAIACLNCCNDCAGOJAAKFAFBBNACEAGABHNKOPDCADAJEAPFGFICOJNFHAMOFEKPCHHNCENGIMNBMADCOKHKMAADMAOHEICHJCHICIHBFOFBAMEGIFAEAHDGCHDKKPEEANIPKCMAPMACAJANGPADNCAEOMOOFOOIENHGHPCAKDAMMJFMABIJOBAHHEOJAIMCHIAJAHIAIHKBCIOCPCNKOIKHMKBNDNGJEOINOGCEPFDDMPEEIJNIFJACEAMOKCHOAHGGFIMGGOKOAIPLHEHBHEKIIMNCCAIJEPCIPIBFIOENIJFOFCAIAOMFGOMHHEMGCJPLDIKFPOOGKIDOCCPHDIMFBOFCMNHCEIAEAGBCBFDAMHMAAMHHHMBMLFAMAJLKGFAKNCOFFMONFOCLENHEHPNGBDAMMJFPJNIKOBKCMEAAEAAHGNOCNIBIIKKNFIBEEPHPCMPPLFADMAOAAAFGHIHCCKDPAHLMDPJMAIAFFKOGDILBFLKOCAIJPANDHAANEGNGBJBGKAIJMEBEKPOLEIAMOOAGCAAFEAIMKHFNOHCCMHDEIFACNCDKNPEDOBAKGKKHCAKPLACFFHMANCEBMGMONFMDFEKNABDKDILLHKHCAHOJICELMHMAHCKDOILHAPNFOAPHMNHFAFPCJJIBKEMOHIFLAMHLPBAGANIFJOEDDBJPGPAEACLGBMCCFHHOODELMPPKNDKMNICBKEFKHMAHOFALCAMNECFEHIHCCKMCICDFCNOLNAKKGAKGMIALACCOMGIMPFHBNFJEPCPFDBCPCEOMDIJDAMAPAOHBPPGGJEBMAIGMAADEFJNFAOEAAKHNDJJNEEOMANFOACPMDBKNDEFEAGOLOEAGNJIEAAKGNIIGKMFFHMGENFALCAIOGIMNHAEGAAJIAAHAAKEIGKBOPBAMJAEJJNOENHPPKDAJEAGIFIALNADKEAALHADDNFHBCBEGHEMNOEILPEACACADFMOADOIAEMCAKAGDKNHBMFDAANACAPCHEHGCJEBIAKGGHAGAJJNPAOIPFNHPDAKENAAGHABAGBCFMOOEKONBFOKKMDIEOGAFMNMDIBPL";
        StringBuilder textWithoutRandomLetters = new StringBuilder();
//      Чистим изначальный шифр от случайных символов
//      Заполняем новую строку
        for (int i = 0; i <= cipherText.length() - 16; i += 16) {
            String gg = cipherText.substring(i, i + 16);
            for (int j = 0; j < 16; j++) {
//              Указываем порядковые номера случайных символов и не добавляем их в новую строку
                if(j != 1 && j != 3 && j != 6 && j != 7 && j != 8 && j != 11 && j != 14 && j != 15){
                    textWithoutRandomLetters.append(gg.charAt(j));
                }
            }
        }
//      Перестановки по ключу
        String textWithoutRandomLettersToString = textWithoutRandomLetters.toString();
        StringBuilder textWithTheCorrectOrderOfLetters = new StringBuilder();
        for (int i = 0; i < textWithoutRandomLettersToString.length(); i+=8) {
            char[] replacArray = textWithoutRandomLettersToString.substring(i, i + 8).toCharArray();
            char[] sourceArray = textWithoutRandomLettersToString.substring(i, i + 8).toCharArray();
            replacArray[0] = sourceArray[1];
            replacArray[1] = sourceArray[2];
            replacArray[2] = sourceArray[3];
            replacArray[3] = sourceArray[4];
            replacArray[4] = sourceArray[0];
            replacArray[5] = sourceArray[6];
            replacArray[6] = sourceArray[7];
            replacArray[7] = sourceArray[5];
            textWithTheCorrectOrderOfLetters.append(replacArray);
        }
//      Расшифровка текста
        String textWithTheCorrectOrderOfLettersToString = textWithTheCorrectOrderOfLetters.toString();
        StringBuilder decryptedText = new StringBuilder();
//      Массив с биграммами
        String[] encoding    = {"JA","AN","CM","GF","OO","HH","PD","EM","IO","BE","BM","BF","AA","NO","IK","ON","HC","CP","FH","DD","MF","EO","EI","KO","CK","NF","CC","HD","KK","KC","GN","LH","AF","PJ","JE","FM","FN","NB","OE","DH","MH","KJ","ED","IL","LM","EC","EG","DC","AL","AJ","OP","GH","KB","PH","GA","FP","CF","HM","MI","***"};
//      Массив с символами
        String[] transcripts = {"н" ,"а" ,"с" ,"т" ,"у" ,"п" ,"л" ,"е" ,"и" ,"я" ,"*" ,"6" ," " ,"д" ,"о" ,"к" ,"р" ,"ц" ,"в" ,"г" ,"ы" ,"В" ,"й" ,"О" ,"ч" ,"ь" ,"ф" ,"м" ,"б" ,"х" ,"." ,"И" ,"з" ,"ю" ,"," ,"Ц" ,"З" ,"ж" ,"ш" ,"Д" ,"–" ,"К" ,"щ" ,"ъ" ,"(" ,")" ,"-" ,"1" ,"8" ,"0" ,"2" ,"7" ,"4" ,"5" ,"3" ,"Т" ,"[" ,"]" ,"\n"};
        for (int i = 0; i <= textWithTheCorrectOrderOfLettersToString.length() - 2; i += 2) {
            int indexEnc = -1;
            for(String encodingElement : encoding) {
                indexEnc++;
                if(textWithTheCorrectOrderOfLettersToString.substring(i, i + 2).equals(encodingElement)){
                    decryptedText.append(transcripts[indexEnc]);
                    break;
                }
                if(encodingElement.equals("***")){
                    decryptedText.append(textWithTheCorrectOrderOfLettersToString.charAt(i));
                    decryptedText.append(textWithTheCorrectOrderOfLettersToString.charAt(i + 1));
                }
            }
        }
//      Вывод в консоль
        System.out.println(decryptedText);
    }
}

